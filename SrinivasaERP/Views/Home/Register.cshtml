@model SrinivasaERP.Models.Register


@section Scripts {
    @* Required for validation *@
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<h1 align="center">User Registration</h1>
@if (ViewBag.ShowAlert != null && ViewBag.ShowAlert == true)
{
    <script>
        alert("Registration completed successfully!");

        setTimeout(function () {
            window.location.href = '@Url.Action("Login", "Login")';
        }, 5000); // Wait 5 seconds before redirecting
    </script>
}

@using (Html.BeginForm("Register", "Home", FormMethod.Post))
{
    <table align="center">
        <tr>
            <td>@Html.LabelFor(m => m.Name)</td>
            <td>
                @Html.TextBoxFor(m => m.Name, new { @placeholder = "Name", minlength = "2",maxlength = "25",pattern = "^[A-Za-z ]+$" })
                @Html.ValidationMessageFor(m => m.Name)
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.Surname)</td>
            <td>
                @Html.TextBoxFor(m => m.Surname, new { @placeholder = "Surname", minlength = "1", maxlength = "25", pattern = "^[A-Za-z ]+$" })
                @Html.ValidationMessageFor(m => m.Surname)
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.Phone)</td>
            <td>
                @Html.TextBoxFor(m => m.Phone, new
                    {
                        @placeholder = "Phone",
                        @minlength = "13",
                        @maxlength = "13",
                        @pattern = @"\+91\d{10}",
                        @title = "Phone number must start with +91 followed by 10 digits"
                    })
                @Html.ValidationMessageFor(m => m.Phone)
            </td>

        </tr>


        <tr>
            <td>@Html.LabelFor(m => m.Email)</td>
            <td>
                @Html.TextBoxFor(m => m.Email, new
                    {
                        @placeholder = "Email",
                        type = "email",
                        pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                        title = "Enter a valid email address"
                    })
                @Html.ValidationMessageFor(m => m.Email)
                <span id="emailMsg" class="mt-2" style="display:block;"></span>
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.UserID)</td>
            <td>
                @Html.TextBoxFor(m => m.UserID, new
                    {
                        @placeholder = "SRT0001",
                        @pattern = "^(?!.*0000$)[A-Z]{3}\\d{4}$",
                        @title = "Must be min 3 uppercase letters followed by 4 digits, and should not end with 0000"
                    })
                @Html.ValidationMessageFor(m => m.UserID)
                <span id="userIDMsg" class="mt-2" style="display:block;"></span>
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.Password)</td>
            <td>
                <div class="password-wrapper">
                    @Html.PasswordFor(m => m.Password, new
                        {
                            @placeholder = "Password",
                            @id = "Password",
                            minlength = "8"
                        })
                    <span onclick="togglePassword('Password', this)" class="toggle-password">👁️</span>
                </div>
                <span style="font-size: 12px; color: gray;">
                </span>
                @Html.ValidationMessageFor(m => m.Password)
            </td>
        </tr>

        <tr>
            <td><label for="ConfirmPassword">Confirm<br />Password</label></td>
            <td>
                <div class="password-wrapper">
                    @Html.Password("ConfirmPassword", null, new
                        {
                            @placeholder = "Confirm Password",
                            @id = "ConfirmPassword"
                        })
                    <span onclick="togglePassword('ConfirmPassword', this)" class="toggle-password">👁️</span>
                </div>
                @Html.ValidationMessage("ConfirmPassword")
            </td>
        </tr>
        <tr>
            <td></td>
            <td><button type="submit">Register</button></td>
        </tr>
    </table>
}
<script>
    function togglePassword(inputId, iconElement) {
        const input = document.getElementById(inputId);
        if (input.type === "password") {
            input.type = "text";
            iconElement.textContent = "🙈"; 
        } else {
            input.type = "password";
            iconElement.textContent = "👁️"; 
        }
    }
</script>


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<script>
    $(document).ready(function () {
        $('#UserID').on('blur', function () {
            var userID = $('#UserID').val();
            if (userID) {
                $.ajax({
                    url: '/Home/CheckUserID',
                    type: 'POST',
                    data: { userID: userID },
                    success: function (isAvailable) {
                        if (!isAvailable) {
                            $('#userIDMsg').text('User ID already exists.').css('color', 'red');
                        } else {
                            $('#userIDMsg').text('User ID available ✅').css('color', 'green');
                        }
                    },
                    error: function () {
                        $('#userIDMsg').text('Error checking User ID.').css('color', 'orange');
                    }
                });
            }
        });

        $('#Email').on('blur', function () {
            var email = $('#Email').val();
            if (email) {
                $.ajax({
                    url: '/Home/CheckEmail',
                    type: 'POST',
                    data: { email: email },
                    success: function (isAvailable) {
                        if (!isAvailable) {
                            $('#emailMsg').text('Email already exists.').css('color', 'red');
                        } else {
                            $('#emailMsg').text('Email available ✅').css('color', 'green');
                        }
                    },
                    error: function () {
                        $('#emailMsg').text('Error checking Email.').css('color', 'orange');
                    }
                });
            }
        });
    });
</script>

<style>
    .password-wrapper {
        position: relative;
        width: 300px;
        display: inline-block;
    }

        .password-wrapper input {
            width: 100%;
            padding-right: 2.5rem; 
            height: 40px;
            border-radius: 8px;
            padding-left: 15px; 
            box-sizing: border-box;
        }

    .toggle-password {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        user-select: none;
        font-size: 18px;
        color: #666;
    }

    input {
        padding-left: 15px;
        height: 40px;
        width: 300px;
        border-radius: 8px;
    }

    button {
        background-color: rgb(0, 110, 255);
        color: white;
        height: 40px;
        width: 300px;
        border-radius: 8px;
    }

    tr {
        height: 65px;
    }
</style>
