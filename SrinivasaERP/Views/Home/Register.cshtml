@model SrinivasaERP.Models.Register


@section Scripts {
    @* Required for validation *@
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<div class="h1">
    <h1 align="center">User Registration</h1>
</div>

@if (ViewBag.ShowAlert != null && ViewBag.ShowAlert == true)
{
    <script>
        alert("Registration completed successfully!");

        setTimeout(function () {
            window.location.href = '@Url.Action("Login", "Login")';
        }, 5000); // Wait 5 seconds before redirecting
    </script>
}

@using (Html.BeginForm("Register", "Home", FormMethod.Post))
{
    <table align="center">
        <tr>
            <td>@Html.LabelFor(m => m.Name)</td>
            <td>
                @Html.TextBoxFor(m => m.Name, new { @placeholder = "Name", minlength = "2",maxlength = "25",pattern = "^[A-Za-z ]+$" })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.Surname)</td>
            <td>
                @Html.TextBoxFor(m => m.Surname, new { @placeholder = "Surname", minlength = "1", maxlength = "25", pattern = "^[A-Za-z ]+$" })
                @Html.ValidationMessageFor(m => m.Surname, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.Phone)</td>
            <td>
                @Html.TextBoxFor(m => m.Phone, new
                    {
                        @placeholder = "Phone",
                        @minlength = "13",
                        @maxlength = "13",
                        @pattern = @"\+91\d{10}",
                        @title = "Phone number must start with +91 followed by 10 digits"
                    })
                @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
            </td>

        </tr>


        <tr>
            <td>@Html.LabelFor(m => m.Email)</td>
            <td>
                @Html.TextBoxFor(m => m.Email, new
                    {
                        @id = "Email",
                        @placeholder = "Email",
                        type = "email",
                        pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                        title = "Enter a valid email address"
                    })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                <span id="emailMsg" class="mt-2" style="display:block;"></span>
            </td>
        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.UserID)</td>
            <td>
                @Html.TextBoxFor(m => m.UserID, new
                    {
                        @id = "UserID",
                        @placeholder = "SRT0001",
                        @required = "required", 
                        @pattern = "SRT(?!0000)\\d{4}",
                        @title = "Must start with 'SRT' followed by 4 digits, and must not end with 0000"
                    })
                @Html.ValidationMessageFor(m => m.UserID, "", new { @class = "text-danger" })
                <span id="userIDMsg" class="mt-2" style="display:block;"></span>
                
            </td>

        </tr>

        <tr>
            <td>@Html.LabelFor(m => m.Password)</td>
            <td>
                <div class="password-wrapper">
                    @Html.PasswordFor(m => m.Password, new
                        {
                            @placeholder = "Password",
                            @id = "Password",
                            required = "required", 
                            pattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_])(?!.*\s).{8,12}$",
                            title = "Password must be 8–12 characters, include uppercase, lowercase, number, special character, and no spaces"
                        })
                    <span onclick="togglePassword('Password', this)" class="toggle-password">👁️</span>
                </div>
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
            </td>

        </tr>

        <tr>
            <td><label for="ConfirmPassword">Confirm<br />Password</label></td>
            <td>
                <div class="password-wrapper">
                    @Html.PasswordFor(m => m.ConfirmPassword, new
                        {
                            @placeholder = "Confirm Password",
                            @id = "ConfirmPassword",
                            @required = "required",
                            @title = "Please re-enter your password"
                        })
                    <span onclick="togglePassword('ConfirmPassword', this)" class="toggle-password">👁️</span>
                </div>
                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
            </td>
        </tr>
    <tr>
        <td></td>
        <td class="note"> Note : All * fields must be filled out.</td>
    </tr>
        <tr>
            <td></td>
            <td><button type="submit">Register</button></td>
        </tr>
    </table>
}
<script>
    function togglePassword(inputId, iconElement) {
        const input = document.getElementById(inputId);
        if (input.type === "password") {
            input.type = "text";
            iconElement.textContent = "🙈"; 
        } else {
            input.type = "password";
            iconElement.textContent = "👁️"; 
        }
    }
</script>
<script src="@Url.Content("~/lib/jquery/dist/jquery.min.js")"></script>
<script src="@Url.Content("~/lib/jquery-validation/dist/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js")"></script>

<script>
    $(document).ready(function () {

        $('#UserID').on('blur', function () {
            var userID = $(this).val();
            if (userID) {
                $.ajax({
                    url: '/Home/CheckUserID',
                    type: 'POST',
                    data: { userID: userID },
                    success: function (isAvailable) {
                        if (!isAvailable) {
                            $('#userIDMsg').text('User ID already exists.').css('color', 'red');
                        } else {
                            $('#userIDMsg').text('User ID available ✅').css('color', 'green');
                        }
                    },
                    error: function (xhr, status, error) {
                        $('#userIDMsg').text('Error checking User ID.').css('color', 'orange');
                        console.error("AJAX error:", error);
                    }
                });
            }
        });

        $('#Email').on('blur', function () {
            var email = $(this).val();
            if (email) {
                $.ajax({
                    url: '/Home/CheckEmail',
                    type: 'POST',
                    data: { email: email },
                    success: function (isAvailable) {
                        if (!isAvailable) {
                            $('#emailMsg').text('Email already exists.').css('color', 'red');
                        } else {
                            $('#emailMsg').text('Email available ✅').css('color', 'green');
                        }
                    },
                    error: function (xhr, status, error) {
                        $('#emailMsg').text('Error checking Email.').css('color', 'orange');
                        console.error("AJAX error:", error);
                    }
                });
            }
        });

    });
</script>

<style>
    body {
        margin: 0;
        padding: 20px;
        font-family: 'Segoe UI', sans-serif;
        background-color: #f9f9f9;
        overflow-x:hidden;
        background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url("https://cdn.pixabay.com/photo/2019/06/20/17/52/color-4287692_1280.jpg") no-repeat center center fixed;
        background-size: cover;
        color: white;
    }

    h1 {
        text-align: center;
        color: white;
        margin-bottom: 20px;
        
    }

    table {
        width: 100%;
        max-width: 300px;
        margin: auto;
        border-collapse: collapse;
    }

    td {
        padding: 10px 5px;
        vertical-align: top;
    }

    input {
        width: 160%;
        height:100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    button {
        background-color: #007bff;
        color: white;
        padding: 10px;
        width: 100%;
        border: none;
        border-radius: 50px;
        font-weight: bold;
        font-size: 16px;
        margin-bottom:20px;
    }

    .password-wrapper {
        position: relative;
    }

        .password-wrapper input {
            padding-right: 2.5rem;
        }

    .toggle-password {
        position: absolute;
        right: -120px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        font-size: 18px;
        color: #666;
    }

    .text-danger {
        color: red;
        font-size: 14px;
    }

    @@media screen and (max-width: 600px) {
        table, td

    {
        display: block;
        width: 100%;
    }

    td {
        padding: 10px 0;
    }

        td:first-child {
            font-weight: bold;
        }

    button {
        width: 100%;
    }

    }
    .h1{
        border:2px solid red;
        background-color:red;
        border-radius:50%;
        

    }

    label[for="Name"]::after,
    label[for="Surname"]::after,
    label[for="Phone"]::after,
    label[for="Email"]::after,
    label[for="UserID"]::after,
    label[for="Password"]::after,
    label[for="ConfirmPassword"]::after {
        content: "*";
        color: red;
        font-weight: bold;
    }
    .note{
        font-size:13px;
    }


</style>
